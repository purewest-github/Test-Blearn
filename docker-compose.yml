# docker-composeのバージョンを指定
version: "3.9"

# db(MySQL),app(Django)のコンテナを作成
services:
  db:
    # コンテナ名をmysqlに設定
    container_name: MySQL
    # MySQLのDockerfileをビルドする
    build:
      # ビルドコンテキストはカレントディレクトリ
      context: .
      dockerfile: Docker/MySQL/Dockerfile
    # M1チップでも動くように
    # Intel Macの場合あってもなくても動く
    platform: linux/x86_64
    # DBのボリュームを指定
    # ローカルの/data/dbをコンテナの/var/lib/mysqlにマウントする
    volumes:
      - mysql_data:/var/lib/mysql
    # コンテナ内の環境変数を.envを使って設定
    env_file:
      - .env
    # DBのコンテナのヘルスチェックを行う
    # mysqladmin(MySQLサーバーの管理を行うクライアントを使ってDBコンテナ自身(127.0.0.1)にpingを送ってヘルスチェックを行う
    healthcheck:
      test: mysqladmin ping -h 127.0.0.1 -u$$MYSQL_USER -p$$MYSQL_PASSWORD
      # ヘルスチェックのインターバルは10秒
      interval: 10s
      # タイムアウト時間は10秒
      timeout: 10s
      # リトライ回数は3回
      retries: 3
      # ヘルスチェックが失敗しても無視する時間は30秒
      start_period: 30s

  app:
    # コンテナ名をdjangoに設定
    container_name: Django
    # DjangoのDockerfileをビルドする
    build: 
      # ビルドコンテキストはカレントディレクトリ
      context: .
      dockerfile: Docker/Django/Dockerfile
    # ボリュームを指定
    # ローカルのカレントディレクトリをコンテナの/codeにマウントする
    # ローカルの/staticをコンテナの/staticにマウントする
    volumes:
      - ./Django_App:/code
      - ./Django_App/static:/static
    # ローカルの8000番ポートとコンテナの8000番ポートをつなぐ
    ports:
      - "8000:8000"
    # コマンドを実行
    # python manage.py collectstaticで静的ファイルをstaticファイルに集める
    # --noinputで出力結果を出さない
    # python manage.py runserver 0.0.0.0:8000でappコンテナをupした時にサーバが起動
    command:  bash -c "python manage.py collectstatic --noinput && \
              python manage.py runserver 0.0.0.0:8000"
    # コンテナ内の環境変数を.envを使って設定
    env_file:
      - .env
    # 先にdbを起動してからappを起動する
    depends_on:
      db:
        # dbのヘルスチェックが終わってからappを起動させる
        condition: service_healthy
  
  phpmyadmin:
    image: phpmyadmin/phpmyadmin
    # コンテナ内の環境変数を.envを使って設定
    env_file:
      - .env
    links:
      - db
    ports:
      - 4000:80
    volumes:
      - ./phpmyadmin/sessions:/sessions
        
volumes:
  mysql_data:
  static: